var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.193,1,1.717]],["body/modules/AppModule.html",[0,1.865,1,3.232,2,1.358,3,1.531,4,2.001,5,2.001,6,1.531,7,1.74,8,2.001,9,2.351,10,2.351,11,2.733,12,0.042,13,2.733,14,2.718,15,2.001,16,2.001,17,0.328,18,0.328,19,0.271,20,2.882,21,3.914,22,0.601,23,0.389,24,2.882,25,2.882,26,0.328,27,0.164,28,0.022,29,0.03,30,0.022]],["title/interfaces/Cat.html",[31,1.34,32,1.511]],["body/interfaces/Cat.html",[12,0.041,17,0.362,18,0.362,19,0.298,26,0.362,28,0.024,29,0.032,30,0.024,31,1.498,32,2.221,33,2.208,34,2.593,35,0.362,36,2.524,37,4.047,38,4.047,39,1.029,40,2.819,41,0.736,42,2.811,43,2.481]],["title/controllers/CatsController.html",[44,1.717,45,1.717]],["body/controllers/CatsController.html",[12,0.044,17,0.22,18,0.22,19,0.181,22,0.63,23,0.261,26,0.22,27,0.11,28,0.015,29,0.022,30,0.015,32,1.027,35,0.22,39,0.609,40,2.143,41,0.463,43,1.027,44,1.167,45,1.772,46,1.577,47,1.577,48,1.933,49,1.577,50,0.779,51,3.116,52,2.395,53,3.233,54,3.549,55,1.933,56,2.709,57,2.895,58,3.549,59,0.835,60,1.933,61,0.779,62,0.779,63,0.942,64,1.933,65,2.935,66,1.933,67,2.935,68,1.933,69,3.549,70,1.167,71,1.933,72,1.933,73,1.933,74,1.167,75,1.933,76,1.167,77,1.933,78,1.772,79,1.933,80,1.933,81,1.672,82,1.577,83,1.933,84,1.933,85,1.577,86,1.933,87,1.933,88,1.577,89,1.933,90,1.933,91,1.933,92,0.576,93,1.933,94,1.933,95,1.027,96,1.933]],["title/modules/CatsModule.html",[0,1.193,11,1.511]],["body/modules/CatsModule.html",[0,1.888,2,1.39,3,1.568,4,2.049,5,2.049,6,1.568,7,2.716,8,2.049,11,2.752,12,0.042,14,2.762,15,2.049,16,2.049,17,0.336,18,0.336,19,0.277,22,0.608,23,0.399,26,0.336,27,0.168,28,0.022,29,0.03,30,0.022,45,2.716,46,3.245,81,2.44,82,2.407,97,2.407,98,2.407,99,2.951,100,2.951]],["title/injectables/CatsService.html",[81,1.34,101,0.213]],["body/injectables/CatsService.html",[12,0.043,17,0.289,18,0.289,19,0.238,22,0.485,23,0.343,26,0.289,27,0.144,28,0.019,29,0.027,30,0.019,32,2.805,35,0.289,36,2.166,39,0.527,41,0.566,43,2.209,49,3.392,50,0.952,52,2.926,53,3.685,59,0.978,61,0.674,62,0.674,63,0.952,70,1.534,81,1.69,85,2.072,92,0.757,101,0.269,102,0.849,103,2.072,104,3.392,105,3.587,106,2.54,107,2.54,108,2.072,109,1.534,110,2.54,111,2.54,112,2.54]],["title/modules/CoreModule.html",[0,1.193,13,1.511]],["body/modules/CoreModule.html",[0,1.731,2,1.469,7,1.883,12,0.044,13,2.193,17,0.355,18,0.355,19,0.293,22,0.665,23,0.421,26,0.355,27,0.177,28,0.024,29,0.031,30,0.024,113,3.119,114,4.626,115,2.166,116,2.492,117,3.119,118,2.193,119,3.119,120,4.127,121,4.127]],["title/classes/CreateCatDto.html",[27,0.162,56,1.717]],["body/classes/CreateCatDto.html",[12,0.042,17,0.31,18,0.31,19,0.256,22,0.368,26,0.31,27,0.214,28,0.021,29,0.029,30,0.021,35,0.31,36,2.273,37,3.52,38,3.52,39,0.896,40,2.273,41,0.681,42,2.474,43,2.849,56,2.273,57,3.071,59,1.015,122,1.891,123,3.798,124,2.221,125,2.723,126,4.887,127,2.723,128,2.723,129,3.765,130,1.891]],["title/injectables/ErrorsInterceptor.html",[101,0.213,131,1.975]],["body/injectables/ErrorsInterceptor.html",[12,0.043,17,0.299,18,0.299,19,0.246,22,0.572,23,0.354,26,0.299,27,0.149,28,0.02,29,0.028,30,0.02,35,0.299,39,0.544,41,0.413,50,0.973,59,0.617,61,0.696,62,0.696,63,0.696,92,0.782,101,0.275,102,0.876,131,2.546,132,2.138,133,1.948,134,2.214,135,2.158,136,2.158,137,2.434,138,2.621,139,1.235,140,2.247,141,2.138,142,2.621,143,1.948,144,2.621,145,1.235,146,2.621,147,1.393,148,0.782,149,2.138,150,2.621,151,2.621,152,2.621,153,2.621,154,2.621,155,2.621]],["title/classes/HttpExceptionFilter.html",[27,0.162,156,1.975]],["body/classes/HttpExceptionFilter.html",[12,0.042,17,0.295,18,0.295,19,0.243,22,0.351,23,0.351,26,0.295,27,0.147,28,0.02,29,0.028,30,0.02,35,0.295,39,0.538,41,0.409,50,0.966,59,0.61,61,0.688,62,0.688,63,0.688,70,1.566,95,1.378,122,1.801,141,3.719,148,1.085,156,2.527,157,2.969,158,2.116,159,4.205,160,4.205,161,3.64,162,4.205,163,4.559,164,2.594,165,2.594,166,2.594,167,2.423,168,2.594,169,2.594,170,1.378,171,2.594,172,2.116,173,2.594,174,3.64,175,2.594,176,2.594,177,2.594,178,2.594,179,2.594,180,2.594]],["title/injectables/LoggerMiddleware.html",[101,0.213,181,1.975]],["body/injectables/LoggerMiddleware.html",[12,0.043,17,0.338,18,0.338,19,0.279,22,0.401,23,0.401,26,0.338,27,0.169,28,0.023,29,0.03,30,0.023,35,0.338,39,0.616,41,0.468,50,1.06,59,0.698,61,0.788,62,0.788,63,0.788,70,2.725,101,0.299,102,0.992,136,2.274,148,0.885,181,2.773,182,2.422,183,3.994,184,3.994,185,4.513,186,2.969,187,2.969,188,2.422,189,3.994,190,2.969]],["title/injectables/LoggingInterceptor.html",[101,0.213,116,1.717]],["body/injectables/LoggingInterceptor.html",[12,0.043,17,0.302,18,0.302,19,0.249,22,0.575,23,0.358,26,0.302,27,0.151,28,0.02,29,0.028,30,0.02,35,0.302,39,0.55,41,0.418,50,0.98,59,0.623,61,0.703,62,0.703,63,0.703,92,0.79,101,0.277,102,0.886,116,2.23,133,1.963,134,2.23,135,2.168,136,2.168,137,2.445,139,1.248,140,2.26,143,1.963,145,1.248,147,1.408,148,0.79,149,2.161,167,1.408,191,2.161,192,2.649,193,2.649,194,2.649,195,2.649,196,3.694,197,2.649,198,2.649,199,2.649]],["title/injectables/ParseIntPipe.html",[78,1.717,101,0.213]],["body/injectables/ParseIntPipe.html",[12,0.043,17,0.31,18,0.31,19,0.256,22,0.368,23,0.368,26,0.31,27,0.155,28,0.021,29,0.029,30,0.021,35,0.31,39,0.565,41,0.429,42,2.293,50,0.999,51,2.997,59,0.641,61,0.722,62,0.722,63,0.722,78,2.273,92,0.812,95,1.447,101,0.282,102,0.91,109,1.644,148,0.812,167,1.447,200,3.071,201,2.221,202,3.071,203,3.071,204,2.997,205,3.798,206,2.723,207,2.221,208,3.071,209,3.765,210,2.723,211,2.723,212,2.723,213,2.221,214,2.221,215,2.221]],["title/interfaces/Response.html",[31,1.34,170,1.511]],["body/interfaces/Response.html",[12,0.044,17,0.321,18,0.321,19,0.264,22,0.594,23,0.381,26,0.439,27,0.16,28,0.021,29,0.029,30,0.021,31,1.327,33,1.955,35,0.321,36,2.326,41,0.444,92,0.84,101,0.289,118,1.496,133,1.496,135,1.815,136,1.327,137,2.047,139,1.327,140,2.047,143,2.047,145,1.327,147,1.496,148,0.84,170,2.047,216,1.955,217,4.035,218,3.583,219,2.297,220,2.297]],["title/guards/RolesGuard.html",[76,1.717,221,1.975]],["body/guards/RolesGuard.html",[12,0.044,17,0.262,18,0.262,19,0.216,22,0.452,23,0.311,26,0.262,27,0.131,28,0.017,29,0.025,30,0.017,35,0.262,39,0.694,41,0.527,43,1.224,50,0.887,59,0.787,61,0.887,62,0.887,63,0.611,74,2.019,76,2.019,88,1.879,92,0.997,101,0.25,115,1.599,135,2.035,139,1.085,148,0.687,167,2.295,172,1.879,222,2.303,223,1.879,224,4.319,225,2.303,226,2.303,227,4.785,228,2.303,229,3.344,230,2.303,231,2.728,232,2.303,233,2.303,234,2.303,235,2.303,236,3.344,237,2.303,238,3.344,239,2.303,240,2.303,241,2.303,242,2.303,243,2.303]],["title/injectables/TimeoutInterceptor.html",[101,0.213,244,1.975]],["body/injectables/TimeoutInterceptor.html",[12,0.043,17,0.321,18,0.321,19,0.264,22,0.594,23,0.381,26,0.321,27,0.16,28,0.021,29,0.029,30,0.021,35,0.321,39,0.584,41,0.444,50,1.022,59,0.663,61,0.747,62,0.747,63,0.747,92,0.84,101,0.289,102,0.941,133,2.047,134,2.326,135,2.225,136,2.069,137,2.51,139,1.327,140,2.334,143,2.047,145,1.327,147,1.496,148,0.84,244,2.676,245,2.297,246,2.816,247,2.816,248,2.816]],["title/injectables/TransformInterceptor.html",[101,0.213,118,1.511]],["body/injectables/TransformInterceptor.html",[12,0.043,17,0.299,18,0.299,19,0.246,22,0.572,23,0.354,26,0.418,27,0.149,28,0.02,29,0.028,30,0.02,31,1.235,35,0.299,39,0.544,41,0.413,50,0.973,59,0.617,61,0.696,62,0.696,63,0.696,92,0.782,101,0.275,102,0.876,118,1.948,133,2.247,134,1.583,135,2.158,136,1.992,137,2.434,139,1.728,140,2.247,143,1.948,145,1.235,147,1.393,148,0.782,170,1.393,216,1.82,217,2.991,218,2.138,219,2.138,220,2.138,249,2.621]],["title/injectables/ValidationPipe.html",[101,0.213,250,1.975]],["body/injectables/ValidationPipe.html",[12,0.044,17,0.227,18,0.227,19,0.187,22,0.489,23,0.27,26,0.227,27,0.206,28,0.015,29,0.023,30,0.015,35,0.227,39,0.624,40,1.205,41,0.743,42,1.06,50,0.798,51,2.513,59,0.707,61,0.798,62,0.798,63,0.798,92,1.079,95,1.06,101,0.225,102,0.667,104,2.952,109,2.432,130,1.386,148,0.595,167,2.141,202,2.453,203,2.453,204,2.797,205,3.286,207,1.628,208,2.453,213,1.628,214,1.628,215,1.628,231,2.952,250,2.088,251,1.628,252,3.007,253,3.007,254,1.995,255,4.028,256,1.995,257,1.995,258,1.628,259,1.995,260,1.995,261,3.007,262,1.995,263,1.995,264,1.995,265,1.995,266,1.995,267,1.628,268,1.995,269,1.995,270,1.995]],["title/coverage.html",[271,3.164]],["body/coverage.html",[6,1.196,12,0.042,19,0.211,27,0.187,28,0.017,29,0.025,30,0.017,31,1.549,32,1.196,34,1.836,41,0.355,44,1.359,45,1.359,47,1.836,56,1.359,74,1.359,76,1.359,78,1.359,81,1.06,95,1.196,101,0.376,103,1.836,116,1.359,118,1.196,123,1.836,124,1.836,131,1.563,132,1.836,156,1.563,157,1.836,158,1.836,170,1.196,181,1.563,182,1.836,188,1.836,191,1.836,200,1.836,201,1.836,216,2.283,221,1.563,223,1.836,244,1.563,245,1.836,250,1.563,251,1.836,267,4.495,271,1.836,272,2.25,273,2.25,274,2.25,275,4.273,276,1.836,277,2.25,278,3.288,279,5.025,280,3.288,281,1.836,282,2.25,283,2.25]],["title/dependencies.html",[3,1.817,284,2.376]],["body/dependencies.html",[3,1.769,12,0.043,23,0.45,27,0.245,28,0.025,29,0.033,30,0.025,115,2.312,130,2.312,145,1.569,204,2.312,258,2.716,285,4.775,286,3.329,287,4.308,288,3.329,289,3.329,290,3.329,291,3.329,292,3.329,293,3.329,294,3.329,295,3.329,296,3.329,297,3.329,298,3.329,299,3.329]],["title/miscellaneous/functions.html",[300,1.434,301,2.79]],["body/miscellaneous/functions.html",[6,2.8,12,0.037,28,0.031,29,0.037,30,0.031,35,0.472,281,3.378,300,2.5,301,3.378,302,4.14]],["title/index.html",[35,0.324,303,2.32]],["body/index.html",[0,1.3,1,3.171,2,1.46,3,1.647,4,2.152,5,2.152,6,1.647,7,1.871,8,2.152,9,2.528,10,2.528,11,2.715,12,0.039,13,2.45,14,2.854,15,2.152,16,2.152,28,0.024,29,0.031,30,0.024,33,2.152,44,1.871,81,2.173,97,2.528,98,2.528,102,1.036,122,2.152,221,2.152,303,2.528,304,3.099,305,4.11,306,3.099,307,4.11]],["title/modules.html",[2,1.828]],["body/modules.html",[1,2.361,2,1.842,11,2.078,12,0.036,13,2.078,28,0.03,29,0.036,30,0.03,308,4.766,309,4.766,310,4.766,311,5.14,312,3.91,313,3.91]],["title/miscellaneous/variables.html",[300,1.434,314,2.79]],["body/miscellaneous/variables.html",[12,0.041,28,0.03,29,0.036,30,0.03,35,0.445,42,2.078,74,3.231,108,3.19,109,2.361,276,3.19,300,2.361,314,3.19,315,3.91,316,3.91]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":267,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.1.13",{"_index":293,"title":{},"body":{"dependencies.html":{}}}],["0.11.1",{"_index":291,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":290,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":278,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":279,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":280,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":275,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":305,"title":{},"body":{"index.html":{}}}],["10",{"_index":211,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["2",{"_index":307,"title":{},"body":{"index.html":{}}}],["3",{"_index":304,"title":{},"body":{"index.html":{}}}],["3.0.2",{"_index":295,"title":{},"body":{"dependencies.html":{}}}],["4.1.3",{"_index":299,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":289,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":296,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":285,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":306,"title":{},"body":{"index.html":{}}}],["age",{"_index":37,"title":{},"body":{"interfaces/Cat.html":{},"classes/CreateCatDto.html":{}}}],["app_interceptor",{"_index":114,"title":{},"body":{"modules/CoreModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["argumentmetadata",{"_index":205,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":163,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":269,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":51,"title":{},"body":{"controllers/CatsController.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["available",{"_index":313,"title":{},"body":{"modules.html":{}}}],["await",{"_index":264,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["badrequestexception",{"_index":207,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":214,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["body",{"_index":71,"title":{},"body":{"controllers/CatsController.html":{}}}],["boolean",{"_index":231,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["breed",{"_index":38,"title":{},"body":{"interfaces/Cat.html":{},"classes/CreateCatDto.html":{}}}],["browse",{"_index":311,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":308,"title":{},"body":{"modules.html":{}}}],["callhandler",{"_index":137,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":224,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":229,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cat",{"_index":32,"title":{"interfaces/Cat.html":{}},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"coverage.html":{}}}],["cat.dto",{"_index":84,"title":{},"body":{"controllers/CatsController.html":{}}}],["cat.dto.ts",{"_index":124,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["cat.dto.ts:11",{"_index":127,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["cat.dto.ts:5",{"_index":128,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["cat.dto.ts:8",{"_index":125,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["catch",{"_index":160,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":161,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":166,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":146,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["catcherror(err",{"_index":151,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["cats",{"_index":49,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["cats.controller",{"_index":100,"title":{},"body":{"modules/CatsModule.html":{}}}],["cats.service",{"_index":82,"title":{},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{}}}],["cats/cats.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["catscontroller",{"_index":45,"title":{"controllers/CatsController.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"coverage.html":{}}}],["catsmodule",{"_index":11,"title":{"modules/CatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"index.html":{},"modules.html":{}}}],["catsservice",{"_index":81,"title":{"injectables/CatsService.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"coverage.html":{},"index.html":{}}}],["class",{"_index":27,"title":{"classes/CreateCatDto.html":{},"classes/HttpExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":122,"title":{},"body":{"classes/CreateCatDto.html":{},"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_catsmodule",{"_index":97,"title":{},"body":{"modules/CatsModule.html":{},"index.html":{}}}],["cluster_catsmodule_providers",{"_index":98,"title":{},"body":{"modules/CatsModule.html":{},"index.html":{}}}],["common/decorators/roles.decorator",{"_index":75,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/guards/roles.guard",{"_index":77,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/pipes/parse",{"_index":79,"title":{},"body":{"controllers/CatsController.html":{}}}],["console.log('before",{"_index":194,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":198,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":190,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["const",{"_index":167,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{}}}],["constructor",{"_index":225,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(private",{"_index":88,"title":{},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{}}}],["constructor(reflector",{"_index":226,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context",{"_index":139,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["context.gethandler",{"_index":233,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":235,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":44,"title":{"controllers/CatsController.html":{}},"body":{"controllers/CatsController.html":{},"coverage.html":{},"index.html":{}}}],["controller('cats",{"_index":87,"title":{},"body":{"controllers/CatsController.html":{}}}],["controllers",{"_index":46,"title":{},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{}}}],["core/core.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":13,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"index.html":{},"modules.html":{}}}],["coverage",{"_index":271,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":52,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["create(@body",{"_index":90,"title":{},"body":{"controllers/CatsController.html":{}}}],["create(cat",{"_index":105,"title":{},"body":{"injectables/CatsService.html":{}}}],["create(createcatdto",{"_index":55,"title":{},"body":{"controllers/CatsController.html":{}}}],["createcatdto",{"_index":56,"title":{"classes/CreateCatDto.html":{}},"body":{"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"coverage.html":{}}}],["ctx",{"_index":168,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":173,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":171,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":217,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["date().toisostring",{"_index":178,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now",{"_index":196,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"index.html":{}}}],["decorators",{"_index":57,"title":{},"body":{"controllers/CatsController.html":{},"classes/CreateCatDto.html":{}}}],["default",{"_index":108,"title":{},"body":{"injectables/CatsService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":59,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"dependencies.html":{},"index.html":{}}}],["documentation",{"_index":272,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":83,"title":{},"body":{"controllers/CatsController.html":{}}}],["errors",{"_index":263,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":266,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsinterceptor",{"_index":131,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["exception",{"_index":165,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":158,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:10",{"_index":164,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":175,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":159,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":135,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["export",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"index.html":{}}}],["express",{"_index":287,"title":{},"body":{"dependencies.html":{}}}],["failed",{"_index":215,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["findall",{"_index":53,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["findone",{"_index":54,"title":{},"body":{"controllers/CatsController.html":{}}}],["findone(id",{"_index":66,"title":{},"body":{"controllers/CatsController.html":{}}}],["function",{"_index":188,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":301,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":67,"title":{},"body":{"controllers/CatsController.html":{}}}],["graph",{"_index":312,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":221,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["guards",{"_index":222,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":149,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["hasrole",{"_index":238,"title":{},"body":{"guards/RolesGuard.html":{}}}],["host",{"_index":162,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":169,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":141,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception('new",{"_index":153,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["httpexceptionfilter",{"_index":156,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpstatus",{"_index":142,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["httpstatus.bad_gateway",{"_index":155,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["id",{"_index":69,"title":{},"body":{"controllers/CatsController.html":{}}}],["identifier",{"_index":273,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":148,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":35,"title":{"index.html":{}},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["injectable",{"_index":101,"title":{"injectables/CatsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/CatsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":102,"title":{},"body":{"injectables/CatsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["int.pipe",{"_index":80,"title":{},"body":{"controllers/CatsController.html":{}}}],["int.pipe.ts",{"_index":201,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":206,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intercept",{"_index":133,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":134,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptors/logging.interceptor",{"_index":117,"title":{},"body":{"modules/CoreModule.html":{}}}],["interceptors/transform.interceptor",{"_index":119,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":31,"title":{"interfaces/Cat.html":{},"interfaces/Response.html":{}},"body":{"interfaces/Cat.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":33,"title":{},"body":{"interfaces/Cat.html":{},"interfaces/Response.html":{},"index.html":{}}}],["interfaces/cat.interface",{"_index":85,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["isint",{"_index":129,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["isnan(val",{"_index":212,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isstring",{"_index":126,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["item",{"_index":241,"title":{},"body":{"guards/RolesGuard.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"index.html":{}}}],["loggermiddleware",{"_index":181,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["logginginterceptor",{"_index":116,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logic",{"_index":96,"title":{},"body":{"controllers/CatsController.html":{}}}],["map",{"_index":219,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matching",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":154,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["metadata",{"_index":204,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":255,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methods",{"_index":50,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["miscellaneous",{"_index":300,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"index.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"index.html":{},"modules.html":{}}}],["name",{"_index":39,"title":{},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["nestinterceptor",{"_index":143,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":115,"title":{},"body":{"modules/CoreModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":286,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":288,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":189,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["new",{"_index":95,"title":{},"body":{"controllers/CatsController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["next",{"_index":136,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map(data",{"_index":220,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(timeout(5000",{"_index":248,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["now",{"_index":195,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":199,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["number",{"_index":40,"title":{},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"injectables/ValidationPipe.html":{}}}],["object",{"_index":261,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["observable",{"_index":140,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["optional",{"_index":62,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"index.html":{}}}],["overview",{"_index":303,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":284,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":72,"title":{},"body":{"controllers/CatsController.html":{}}}],["param('id",{"_index":94,"title":{},"body":{"controllers/CatsController.html":{}}}],["parameters",{"_index":61,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["parseint(value",{"_index":210,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":78,"title":{"injectables/ParseIntPipe.html":{}},"body":{"controllers/CatsController.html":{},"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["path",{"_index":179,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["pipe",{"_index":150,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["pipe(tap",{"_index":197,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipetransform",{"_index":208,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":257,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":262,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["post",{"_index":58,"title":{},"body":{"controllers/CatsController.html":{}}}],["prefix",{"_index":48,"title":{},"body":{"controllers/CatsController.html":{}}}],["private",{"_index":104,"title":{},"body":{"injectables/CatsService.html":{},"injectables/ValidationPipe.html":{}}}],["promise",{"_index":65,"title":{},"body":{"controllers/CatsController.html":{}}}],["properties",{"_index":36,"title":{},"body":{"interfaces/Cat.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"interfaces/Response.html":{}}}],["provide",{"_index":120,"title":{},"body":{"modules/CoreModule.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"index.html":{}}}],["readonly",{"_index":43,"title":{},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"guards/RolesGuard.html":{}}}],["reflect",{"_index":292,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":227,"title":{},"body":{"guards/RolesGuard.html":{}}}],["req",{"_index":187,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":172,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["request.url",{"_index":180,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":237,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":185,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"index.html":{}}}],["response",{"_index":170,"title":{"interfaces/Response.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.status(statuscode).json",{"_index":176,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":92,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["returns",{"_index":63,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["rimraf",{"_index":294,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":242,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":74,"title":{},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":89,"title":{},"body":{"controllers/CatsController.html":{}}}],["roles.find(item",{"_index":240,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":76,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rxjs",{"_index":145,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":147,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["setmetadata('roles",{"_index":316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["src/.../main.ts",{"_index":302,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/cats/cats.controller.ts",{"_index":47,"title":{},"body":{"controllers/CatsController.html":{},"coverage.html":{}}}],["src/cats/cats.controller.ts:16",{"_index":60,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:21",{"_index":64,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:26",{"_index":68,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.module.ts",{"_index":99,"title":{},"body":{"modules/CatsModule.html":{}}}],["src/cats/cats.service.ts",{"_index":103,"title":{},"body":{"injectables/CatsService.html":{},"coverage.html":{}}}],["src/cats/cats.service.ts:12",{"_index":107,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:6",{"_index":110,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:8",{"_index":106,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/dto/create",{"_index":123,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["src/cats/interfaces/cat.interface.ts",{"_index":34,"title":{},"body":{"interfaces/Cat.html":{},"coverage.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":276,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/http",{"_index":157,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":223,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:5",{"_index":228,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:8",{"_index":230,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":132,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:14",{"_index":138,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["src/common/interceptors/timeout.interceptor.ts",{"_index":245,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/timeout.interceptor.ts:12",{"_index":246,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":182,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:5",{"_index":186,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/parse",{"_index":200,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts",{"_index":251,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts:13",{"_index":256,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipe.ts:26",{"_index":254,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/core.module.ts",{"_index":113,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":191,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":192,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":216,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:17",{"_index":249,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/main.ts",{"_index":281,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["statements",{"_index":274,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":174,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["string",{"_index":42,"title":{},"body":{"interfaces/Cat.html":{},"classes/CreateCatDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":309,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":310,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":297,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":218,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":283,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":282,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":193,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.cats",{"_index":112,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.cats.push(cat",{"_index":111,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.catsservice.create(createcatdto",{"_index":91,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.catsservice.findall",{"_index":93,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.reflector.get('roles",{"_index":232,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.tovalidate(metatype",{"_index":260,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["throw",{"_index":213,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":144,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["throwerror(new",{"_index":152,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["timeout",{"_index":247,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":244,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":177,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["tovalidate",{"_index":252,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":253,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":202,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":203,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":258,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":118,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":234,"title":{},"body":{"guards/RolesGuard.html":{}}}],["type",{"_index":41,"title":{},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["types",{"_index":268,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.find(type",{"_index":270,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["ui",{"_index":298,"title":{},"body":{"dependencies.html":{}}}],["use",{"_index":183,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":184,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":121,"title":{},"body":{"modules/CoreModule.html":{}}}],["useguards",{"_index":73,"title":{},"body":{"controllers/CatsController.html":{}}}],["useguards(rolesguard",{"_index":86,"title":{},"body":{"controllers/CatsController.html":{}}}],["user",{"_index":236,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles",{"_index":243,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some(role",{"_index":239,"title":{},"body":{"guards/RolesGuard.html":{}}}],["val",{"_index":209,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["validate",{"_index":259,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":265,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationpipe",{"_index":250,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":130,"title":{},"body":{"classes/CreateCatDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":109,"title":{},"body":{"injectables/CatsService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":277,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":314,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":70,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCatsModule\n\nCatsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CatsModule\n                        \n                        \n                            CoreModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CatsModule } from './cats/cats.module';\nimport { CoreModule } from './core/core.module';\n\n@Module({\n  imports: [CoreModule, CatsModule],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cat.html":{"url":"interfaces/Cat.html","title":"interface - Cat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Cat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/interfaces/cat.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        age\n                                \n                                \n                                        breed\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        breed\n                                    \n                                \n                                \n                                    \n                                        breed:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Cat {\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CatsController.html":{"url":"controllers/CatsController.html","title":"controller - CatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cats\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCatDto: CreateCatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/cats/cats.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCatDto\n                                    \n                                                CreateCatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/cats/cats.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/cats/cats.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, UseGuards } from '@nestjs/common';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { ParseIntPipe } from '../common/pipes/parse-int.pipe';\nimport { CatsService } from './cats.service';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { Cat } from './interfaces/cat.interface';\n\n//@UseGuards(RolesGuard)\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catsService: CatsService) {}\n\n  @Post()\n  //@Roles('admin')\n  async create(@Body() createCatDto: CreateCatDto) {\n    this.catsService.create(createCatDto);\n  }\n\n  @Get()\n  async findAll(): Promise {\n    return this.catsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(\n    @Param('id', new ParseIntPipe())\n    id: number,\n  ) {\n    // get by ID logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CatsModule.html":{"url":"modules/CatsModule.html","title":"module - CatsModule","body":"\n                   \n\n\n\n\n    Modules\n    CatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\n\nCatsService\n\nCatsService\n\n\n\nCatsModule\n\nCatsModule\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cats/cats.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CatsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CatsService.html":{"url":"injectables/CatsService.html","title":"injectable - CatsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cats\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(cat: Cat)\n                \n            \n\n\n            \n                \n                    Defined in src/cats/cats.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                Cat\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/cats/cats.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Cat[]\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            cats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Cat[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/cats/cats.service.ts:6\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    this.cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from './interceptors/logging.interceptor';\nimport { TransformInterceptor } from './interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCatDto.html":{"url":"classes/CreateCatDto.html","title":"class - CreateCatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/dto/create-cat.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                age\n                            \n                            \n                                    Readonly\n                                breed\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            age\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/cats/dto/create-cat.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            breed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cats/dto/create-cat.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cats/dto/create-cat.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator';\n\nexport class CreateCatDto {\n  @IsString()\n  readonly name: string;\n\n  //@IsInt()\n  readonly age: number;\n\n  @IsString()\n  readonly breed: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError(err =>\n          throwError(new HttpException('New message', HttpStatus.BAD_GATEWAY)),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/http-exception.filter.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const statusCode = exception.getStatus();\n\n    response.status(statusCode).json({\n      statusCode,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logger.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/logger.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log(`Request...`);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/parse-int.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor> {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () =>\n      user.roles.some(role => !!roles.find(item => item === role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(timeout(5000));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor> {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/validation.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find(type => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/cats/cats.controller.ts\n            \n            controller\n            CatsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/cats.service.ts\n            \n            injectable\n            CatsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/dto/create-cat.dto.ts\n            \n            class\n            CreateCatDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/interfaces/cat.interface.ts\n            \n            interface\n            Cat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ErrorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : 7.0.3\n        \n            @nestjs/core : 7.0.3\n        \n            @nestjs/platform-express : 7.0.3\n        \n            @nestjs/swagger : ^4.4.0\n        \n            class-transformer : 0.2.3\n        \n            class-validator : 0.11.1\n        \n            reflect-metadata : 0.1.13\n        \n            rimraf : 3.0.2\n        \n            rxjs : 6.5.4\n        \n            swagger-ui-express : ^4.1.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\n\nCatsModule\n\nCatsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nCatsService\n\nCatsService\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
